import pepe.*

describe "Test unitarios en Pepe" {
	
	test "Test neto de Pepe como cadete" {
		pepe.categoria(cadete)
		assert.equals(20000, pepe.neto())
	}

	test "Test neto de Pepe como gerente" {
		pepe.categoria(gerente)
		assert.equals(15000, pepe.neto())
	}	

	test "Bono de presentismo normal en Pepe" {
		pepe.bonoPresentismo(normal)
		pepe.faltas(0)
		assert.equals(2000, pepe.bonoPresentismo().bono(pepe.faltas()))
		pepe.faltas(1)
		assert.equals(1000, pepe.bonoPresentismo().bono(pepe.faltas()))
		pepe.faltas(2)
		assert.equals(0, pepe.bonoPresentismo().bono(pepe.faltas()))
	}

	test "Bono de presentismo ajuste en Pepe" {
		pepe.bonoPresentismo(ajuste)
		pepe.faltas(0)
		assert.equals(100, pepe.bonoPresentismo().bono(pepe.faltas()))
		pepe.faltas(1)
		assert.equals(0, pepe.bonoPresentismo().bono(pepe.faltas()))
	}

	test "Bono de presentismo demagógico en Pepe" {
		pepe.bonoPresentismo(demagogico)
		pepe.categoria(gerente)
		assert.equals(500, pepe.bonoPresentismo().bono(pepe.categoria().neto()))
		pepe.categoria(cadete)
		assert.equals(300, pepe.bonoPresentismo().bono(pepe.categoria().neto()))
	}

	test "Bono de presentismo nulo en Pepe" {
		pepe.bonoPresentismo(nulo)
		assert.equals(0, pepe.bonoPresentismo().bono(pepe.categoria().neto()))
	}

	test "Bono de resultados porcentaje en Pepe" {
		pepe.bonoResultado(porcentaje)
		pepe.categoria(gerente)
		assert.equals(1500, pepe.bonoResultado().bono(pepe.categoria().neto()))
		pepe.categoria(cadete)
		assert.equals(2000, pepe.bonoResultado().bono(pepe.categoria().neto()))
	}

	test "Bono de resultados fijo en Pepe" {
		pepe.bonoResultado(fijo)
		pepe.categoria(gerente)
		assert.equals(800, pepe.bonoResultado().bono(pepe.categoria().neto()))
		pepe.categoria(cadete)
		assert.equals(800, pepe.bonoResultado().bono(pepe.categoria().neto()))
		pepe.faltas(2)
		assert.equals(800, pepe.bonoResultado().bono(pepe.faltas()))
	}

	test "Bono de resultados nulo en Pepe" {
		pepe.bonoResultado(nulo)
		pepe.categoria(gerente)
		assert.equals(0, pepe.bonoResultado().bono(pepe.categoria().neto()))
		pepe.categoria(cadete)
		assert.equals(0, pepe.bonoResultado().bono(pepe.categoria().neto()))
		pepe.faltas(2)
		assert.equals(0, pepe.bonoResultado().bono(pepe.faltas()))
	}
}

describe "Test funcionales en Pepe" {
  test "Test sueldo de Pepe como cadete, bono por resultados fijo y bono por presentismo normal, con Pepe faltando tres días" {
	pepe.categoria(cadete)
	pepe.bonoResultado(fijo)
	pepe.bonoPresentismo(normal)
	pepe.faltas(3)
	assert.equals(20800, pepe.sueldo(pepe.categoria().neto(), pepe.faltas()))
  }

  test "Test sueldo de Pepe como gerente, bono por resultados porcentaje y bono por presentismo nulo"{
	pepe.categoria(gerente)
	pepe.bonoResultado(porcentaje)
	pepe.bonoPresentismo(nulo)
	assert.equals(16500, pepe.sueldo(pepe.categoria().neto(), pepe.faltas()))
  }

  test "Test sueldo de Pepe como cadete, bono por resultados porcentaje y bono por presentismo normal, con Pepe sin faltas" {
	pepe.categoria(cadete)
	pepe.bonoResultado(porcentaje)
	pepe.bonoPresentismo(normal)
	pepe.faltas(0)
	assert.equals(24000, pepe.sueldo(pepe.categoria().neto(), pepe.faltas()))
  }

  test "Test sueldo de Pepe como cadete, bono por resultados porcentaje y bono por presentismo normal, con Pepe faltando un día" {
	pepe.categoria(cadete)
	pepe.bonoResultado(porcentaje)
	pepe.bonoPresentismo(normal)
	pepe.faltas(1)
	assert.equals(23000, pepe.sueldo(pepe.categoria().neto(), pepe.faltas()))
  }
}