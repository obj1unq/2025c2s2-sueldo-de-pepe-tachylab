import pepe.*

describe "Test unitarios en Pepe" {
	
	test "Test neto de Pepe como cadete" {
		pepe.categoria(cadete)
		assert.equals(20000, pepe.neto())
	}

	test "Test neto de Pepe como gerente" {
		pepe.categoria(gerente)
		assert.equals(15000, pepe.neto())
	}

	test "Test neto de Pepe como vendedor con aumento de ventas" {
		pepe.categoria(vendedor)
		vendedor.activarAumentoDeVentas()
		assert.equals(20000, pepe.neto())
	}

	test "Test neto de Pepe como vendedor sin aumento de ventas" {
		pepe.categoria(vendedor)
		vendedor.desactivarAumentoDeVentas()
		assert.equals(16000, pepe.neto())
	}

	test "Test neto de Pepe como trabajador de medio tiempo, con medio tiempo con categoria base cadete" {
		pepe.categoria(medioTiempo)
		medioTiempo.categoriaBase(cadete)
		assert.equals(10000, pepe.neto())
	}

	test "Test de Ernesto con Pepe de compañero, con categoria medio tiempo y medio tiempo con categoria base cadete" {
		pepe.categoria(medioTiempo)
		medioTiempo.categoriaBase(cadete)
		ernesto.compañero(pepe)
		assert.equals(10000, ernesto.neto())
	}

	test "Bono de presentismo normal en Pepe" {
		pepe.bonoPresentismo(normal)
		pepe.faltas(0)
		assert.equals(2000, pepe.bonoPresentismo().bono(pepe))
		pepe.faltas(1)
		assert.equals(1000, pepe.bonoPresentismo().bono(pepe))
		pepe.faltas(2)
		assert.equals(0, pepe.bonoPresentismo().bono(pepe))
	}

	test "Bono de presentismo ajuste en Pepe" {
		pepe.bonoPresentismo(ajuste)
		pepe.faltas(0)
		assert.equals(100, pepe.bonoPresentismo().bono(pepe))
		pepe.faltas(1)
		assert.equals(0, pepe.bonoPresentismo().bono(pepe))
	}

	test "Bono de presentismo demagógico en Pepe" {
		pepe.bonoPresentismo(demagogico)
		pepe.categoria(gerente)
		assert.equals(500, pepe.bonoPresentismo().bono(pepe))
		pepe.categoria(cadete)
		assert.equals(300, pepe.bonoPresentismo().bono(pepe))
	}

	test "Bono de presentismo nulo en Pepe" {
		pepe.bonoPresentismo(nulo)
		assert.equals(0, pepe.bonoPresentismo().bono(pepe))
	}

	test "Bono de resultados porcentaje en Pepe" {
		pepe.bonoResultado(porcentaje)
		pepe.categoria(gerente)
		assert.equals(1500, pepe.bonoResultado().bono(pepe))
		pepe.categoria(cadete)
		assert.equals(2000, pepe.bonoResultado().bono(pepe))
	}

	test "Bono de resultados fijo en Pepe" {
		pepe.bonoResultado(fijo)
		pepe.categoria(gerente)
		assert.equals(800, pepe.bonoResultado().bono(pepe))
		pepe.categoria(cadete)
		assert.equals(800, pepe.bonoResultado().bono(pepe))
		pepe.faltas(2)
		assert.equals(800, pepe.bonoResultado().bono(pepe))
	}

	test "Bono de resultados nulo en Pepe" {
		pepe.bonoResultado(nulo)
		pepe.categoria(gerente)
		assert.equals(0, pepe.bonoResultado().bono(pepe))
		pepe.categoria(cadete)
		assert.equals(0, pepe.bonoResultado().bono(pepe))
		pepe.faltas(2)
		assert.equals(0, pepe.bonoResultado().bono(pepe))
	}
}

describe "Test funcionales en Pepe" {
  test "Test sueldo de Pepe como cadete, bono por resultados fijo y bono por presentismo normal, con Pepe faltando tres días" {
	pepe.categoria(cadete)
	pepe.bonoResultado(fijo)
	pepe.bonoPresentismo(normal)
	pepe.faltas(3)
	assert.equals(20800, pepe.sueldo())
  }

  test "Test sueldo de Pepe como gerente, bono por resultados porcentaje y bono por presentismo nulo"{
	pepe.categoria(gerente)
	pepe.bonoResultado(porcentaje)
	pepe.bonoPresentismo(nulo)
	assert.equals(16500, pepe.sueldo())
  }

  test "Test sueldo de Pepe como cadete, bono por resultados porcentaje y bono por presentismo normal, con Pepe sin faltas" {
	pepe.categoria(cadete)
	pepe.bonoResultado(porcentaje)
	pepe.bonoPresentismo(normal)
	pepe.faltas(0)
	assert.equals(24000, pepe.sueldo())
  }

  test "Test sueldo de Pepe como cadete, bono por resultados porcentaje y bono por presentismo normal, con Pepe faltando un día" {
	pepe.categoria(cadete)
	pepe.bonoResultado(porcentaje)
	pepe.bonoPresentismo(normal)
	pepe.faltas(1)
	assert.equals(23000, pepe.sueldo())
  }
}

describe "Test funcionales extra con Pepe, Sofia, Roque y Ernesto" {
	test "Test sueldo de Pepe trabajando medio tiempo como cadete, bono por resultados porcentaje y bono por presentismo demagógico con una falta" {
		pepe.categoria(medioTiempo)
		medioTiempo.categoriaBase(cadete)
		pepe.bonoResultado(porcentaje)
		pepe.bonoPresentismo(demagogico)
		pepe.faltas(1)
		assert.equals(11500, pepe.sueldo())
	}

	test "Test sueldo de Sofia trabajando como vendedor con aumento de ventas, bono por resultados porcentaje" {
		sofia.categoria(vendedor)
		vendedor.activarAumentoDeVentas()
		sofia.bonoResultado(porcentaje)
		sofia.faltas(0)
		assert.equals(28600, sofia.sueldo())
	}

	test "Test sueldo de Roque con bono por resultados fijo" {
		roque.bonoResultado(fijo)
		assert.equals(37800, roque.sueldo())
	}

	test "Test sueldo de Ernesto con Pepe de compañero con categoria medio tiempo, medio tiempo con categoria base cadete y con bono por presentismo ajuste" {
		pepe.categoria(medioTiempo)
		medioTiempo.categoriaBase(cadete)
		ernesto.compañero(pepe)
		ernesto.bonoPresentismo(ajuste)
		ernesto.faltas(0)
		assert.equals(10100, ernesto.sueldo())
	}
}